/*
 * i2cTest.c
 *
 *  Created on: Apr 18, 2013
 *      Author: andres
 */

#include "msp430g2553.h"
#include "i2c.h"
#include "i2c.c"

#define SLAVEADDRESS 0x1D

static char i2cPolling = 0;                                             //Polling i2c


int main(void)
{
	char TxData[4];// = {MCP23017_IODIRA, 0x00, MCP23017_GPIOA, 0xFF};
	int ctr = 0;
	int ctr1 =0;
	WDTCTL = WDTPW + WDTHOLD;

	i2cSetupPins();
	i2cSetupTx(SLAVEADDRESS);
	i2cTransmit(&TxData[0],2);

	while(1)
	{
		i2cTransmit(&TxData[2],2);
		for(ctr=15; ctr>=0; ctr--)
		{
			TxData[3] = (char)ctr;

			for(ctr1=0; ctr1<100; ctr1++)
			{
				_delay_cycles(1000);
			}
			i2cTransmit(&TxData[2],2);
		}
	}

}

//-------------------------------------------------------------------------------
// The USCI_B0 data ISR is used to move received data from the I2C slave
// to the MSP430 memory. It is structured such that it can be used to receive
// any 2+ number of bytes by pre-loading RXByteCtr with the byte count.
//-------------------------------------------------------------------------------
#pragma vector = USCIAB0TX_VECTOR
__interrupt void USCIAB0TX_ISR(void)
{
	if(RX == 1){                              // Master Receive?
		RXByteCtr--;                              // Decrement RX byte counter
		if (RXByteCtr)
		{
			*PRxData++ = UCB0RXBUF;                 // Move RX data to address PRxData
		}
		else
		{
			if(RPT_Flag == 0)
				UCB0CTL1 |= UCTXSTP;                // No Repeated Start: stop condition
			if(RPT_Flag == 1){                    // if Repeated Start: do nothing
				RPT_Flag = 0;
			}
			*PRxData = UCB0RXBUF;                   // Move final RX data to PRxData
			__bic_SR_register_on_exit(CPUOFF);      // Exit LPM0
		}
	}

	else{                                     // Master Transmit
		if (TXByteCtr)                        // Check TX byte counter
		{
			UCB0TXBUF = MSData++;                   // Load TX buffer
			TXByteCtr--;                            // Decrement TX byte counter
		}
		else
		{
			if(RPT_Flag == 1){
				RPT_Flag = 0;
				PTxData = &MSData;                      // TX array start address
				TXByteCtr = NUM_BYTES_TX;                  // Load TX byte counter
				__bic_SR_register_on_exit(CPUOFF);
			}
			else{
				UCB0CTL1 |= UCTXSTP;                    // I2C stop condition
				IFG2 &= ~UCB0TXIFG;                     // Clear USCI_B0 TX int flag
				__bic_SR_register_on_exit(CPUOFF);      // Exit LPM0
			}
		}
	}

}

/*#pragma vector=USCIAB0RX_VECTOR
__interrupt void USCIAB0RX_ISR(void)
//interrupt(USCIAB0RX_VECTOR) USCIAB0RX_ISR(void)
{
	if ((UCB0STAT & UCNACKIFG) == UCNACKIFG && i2cPolling == 1)
	{
		UCB0STAT &= ~UCNACKIFG;
		UCB0CTL1 |= UCTXSTP;
		while(UCB0CTL1 & UCTXSTP);
		i2cPolling = 2;
		__bic_SR_register_on_exit(CPUOFF);

	}
	else
	{
		UCB0CTL1 |= UCTXSTP;
		while(UCB0CTL1 & UCTXSTP);
		while(1);
	}
}


#pragma vector=USCIAB0TX_VECTOR
__interrupt void USCIAB0TX_ISR(void)
//interrupt(USCIAB0TX_VECTOR) USCIAB0TX_ISR(void)
{
	if(i2cRX == 1)                                                          // Master Receive?
	{
		i2cRXByteCtr--;                                                     // Decrement i2cRX byte counter
		if (i2cRXByteCtr > 0)
		{
			*pI2cRxData++ = UCB0RXBUF;                                      // Move i2cRX data to address pI2cRxData
		}
		else if(i2cRXByteCtr == 0)
		{
			IE2 &= ~ UCB0TXIE;      //DEBUG disable interrupt
			IFG2 &= ~UCB0TXIFG;
			UCB0CTL1 |= UCTXSTP;
			*pI2cRxData++ = UCB0RXBUF;                                  // I2C stop condition
			while (UCB0STAT & UCBBUSY);
			UCB0CTL1 |= UCSWRST;                                        // Move final i2cRX data to pI2cRxData
			__bic_SR_register_on_exit(CPUOFF);
		}
	}
	else
	{                                                                       // Master Transmit
		if (i2cTXByteCtr)                                                   // Check TX byte counter
		{
			UCB0TXBUF = *pI2cTxData++;                                        // Load TX buffer
			i2cTXByteCtr--;                                                   // Decrement TX byte counter
		}
		else
		{
			UCB0CTL1 |= UCTXSTP;                                            // I2C stop condition
			IFG2 &= ~UCB0TXIFG;
			__bic_SR_register_on_exit(CPUOFF);                              // Exit LPM0
		}
	}

}*/
